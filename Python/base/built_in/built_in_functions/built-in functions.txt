sources:
	https://docs.python.org/3/library/functions.html

ctrl + f - *****

Built-in Functions:

A
abs()
aiter()
all()
any()
anext()
ascii()

B
bin()
bool()
breakpoint()
bytearray()
bytes()

C
callable()
chr()       	chr -- возвращает код символа char
classmethod()
compile()
complex()

D
delattr()
dict()
dir()
divmod()

E
enumerate()
eval()
exec()

F
filter() - итератор,
float()
format()
frozenset()

G
getattr()
globals() -- инфа ниже

H
hasattr()
hash()
help() - почаще используй эту функцию
hex()

I
id()
input()
int()
isinstance()
issubclass()
iter()
L
len()
list()
locals()

M
map() - итератор,
max()
memoryview()
min()

N
next()

O
object()
oct()
open()
ord()  	ord -- возвращает код символа char

P
pow()
print()
property()




R
range() -- инфа ниже
repr()
reversed() - итератор,
round()

S
set()
setattr()
slice()
sorted() - итератор,
staticmethod()
str()
sum()
super()

T
tuple()
type()

V
vars()

Z
zip() - итератор, tuple(zip([1,2,3,], ('a', 'b', 'c',))) - ((1, 'a'), (2, 'b'), (3, 'c'))

_
__import__()


***** globals()

help(globals)
print(*dir(globals), sep='\n')

Аргумент не принимает
Аналог __dict__() только для модуля. Список глобальных переменных и атрибутов модуля
Кстати __dict__() просто в модуле вызываться не может

pprint.pprint(globals())

{'Iterable': <class '__main__.Iterable'>,
 '__annotations__': {},
 '__builtins__': <module 'builtins' (built-in)>,
 '__cached__': None,
 '__doc__': None,
 '__file__': 'C:\\Users\\kiril\\Desktop\\Job\\tree-of-knowledge\\Python\\python_essential\\practice.py',
 '__loader__': <_frozen_importlib_external.SourceFileLoader object at 0x000001D3E2946D00>,
 '__name__': '__main__',
 '__package__': None,
 '__spec__': None,
 'g': <__main__.Iterable object at 0x000001D3E2A18B80>,
 'pprint': <function pprint at 0x000001D3E3210E50>}

***********


***** range()

help(range)
print(*dir(range), sep='\n')

Ленивая функция
Используются чаще всего с блоком цикла for, для итерирования

Аргументы: start, end, step

Так называемый диапазон. НЕ является итератором. Но итерируемый объект

	hasattr(range, '__next__') # False

Не хранит значения (кроме аргументов), а вычисляет его по формуле:

    r[i] = start + step * i, где i >= 0 и r[i]< stop для step > 0 или r[i] > stop для step < 0
    
Поддерживают все общие последовательности операции, кроме конкатенации и повторения

***********



***** open()
sources:
	cp.beelinewifi.ru/f/redirector/
	https://russianblogs.com/article/6870284562/

open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True)

второй аргмент - действие с файлом:
# -----------------------------------------
# r (read) - открыть для чтения (по умолчанию)
# w (write) - открыть для записи, при открытии содержимое файла стирается
# a (append) - открыть для записи, запись ведётся в конец
# b (binary) - открыть в бинарном режиме
# t (text) - открыть в текстовом режиме (по умолчанию)
# r+ - открыть для чтения и записи
# w+ - открыть для чтения и записи, при открытии содержимое файла стирается
# x - open for exclusive creation, failing if the file already exists
# -----------------------------------------

открытие файла таким образом

	with open('test.txt', mode='r') as file:
    		pp(type(file)) # <class '_io.TextIOWrapper'>

эквивалетно:
	file = open('test.txt', mode='r')
	pp(type(file)) # <class '_io.TextIOWrapper'>
	file.close()

возвращает нам file_object

file_object - можем читать данные, записывать данные

НО!! - самое главное file_object нужно закрывать, когда работа с файлом закончена
file_object.close()

# # важно помнить, что read, readline, readlines считывают object_file
# # и убирают из него то что считали (!не из самого файла, а из объекта файла в Python)
# # это очень похоже на работу с итератором
# # !! test.txt - Это файл, где в текстовом виде написаны ошибки.
# # и поэтому при считке может быть строка 'ArithmeticError\n' и т.д.
# with open(file='test.txt', mode='r') as file_obj:
#     # # for read
#     # # -------------- for read ------------------------------
#     # data = file_obj.read(5)
#     # print(repr(data)) # '4\nAri'
#     # data2 = file_obj.read()
#     # # print(repr(data2))  # 'thmeticError\nZeroDivisionError : ArithmeticError\nOSError\nFileNotFoundError : OSError\n4\nZeroDivisionError\nOSError\nArithmeticError\nFileNotFoundError'
#     # data = data + data2
#     # ls_data = data.split('\n')
#     # ls_data2 = data.splitlines()
#     # print(ls_data, ls_data2, sep='\n') # ['4', 'ArithmeticError', 'ZeroDivisionError : ArithmeticError', 'OSError', 'FileNotFoundError : OSError', '4', 'ZeroDivisionError', 'OSError', 'ArithmeticError', 'FileNotFoundError']
#
#     # -------------- for readlines --------------------------
#     # data_lines = file_obj.readlines() # ['4\n', 'ArithmeticError\n', 'ZeroDivisionError : ArithmeticError\n', ...
#     # print(data_lines)
#
#     # # -------------- for readline --------------------------
#     # data_line = file_obj.readline()
#     # print(data_line)
#     # data_line2 = file_obj.readline() # 'ArithmeticError\n'
#     # print(repr(data_line2))
#     # data_line2 = data_line2.rstrip() # 'ArithmeticError'
#     # print(repr(data_line2))
#     ## но readline здесь действует как __next__()
#     ## file_object можно спокойно итерировать, и это даже более экономно
#
#     # # -------------- итерация file_object --------------------------
#     # for line in file_obj:
#     #     print(repr(line)) # 'ArithmeticError\n'
#     #     line = line.rstrip() # убирает символ переноса строки
#     #     print(repr(line)) # 'ArithmeticError'
#     #
#     # ## когда в файле не осталось не считанной информации
#     # ## метод read() будет возвращать пустую строку
#     # print('-'*30)
#     # print(repr(file_obj.read())) # - ничего - ''
#     # print(file_obj.readline()) # - ничего - ''
#     # print(file_obj.readlines()) # - []
#     pass


# ---------------------- создание и запись файла (mode='w') --------------------
# # 1)
# file1 = open('my_test.txt', 'w')
# file1.close() # - всё. файл создан
#
# # 2)
# # или так
# with open('my_test2.txt', 'w') as file:
#     pass


# with open('my_test2.txt', 'w') as file_obj:
#     # file_obj.write('Hello')
#     # file_obj.write('world') # Helloworld
#     #
#     # # поэтому важно использовать перенос строк и специальные симоволы
#     # file_obj.write('\nHello\n')
#     # file_obj.write('blya\n')    # Hello
#     #                         # blya
#     #
#     # # очень часто может быть полезен join
#     # lines = ['raw1', 'raw2', 'raw3',]
#     # file_obj.write('\n'.join(lines))
#     # print(file_obj) # <_io.TextIOWrapper name='my_test2.txt' mode='w' encoding='cp1251'>
#     # print(type(file_obj)) # <class '_io.TextIOWrapper'>
#     pass


# ----- как дозаписать данные в конец файла
# mode='a' - создаёт файл если его небыло, а если он был
# то дозаписывает данные в конец файла

# много раз нажми ctrl-shift-f10
# with open('my_test3.txt', 'a') as file_obj:
#     file_obj.write('ТААААА - \n')
#     file_obj.write(' - ШААААА\n')



# лайфхак, в менеджере контекста with можно открывать сразу несколько файлов

# with open('my_test3.txt', 'r') as file_obj1_R, open('my_test4.txt', 'w') as file_obj2_W:
#     for line in file_obj1_R:
#         file_obj2_W.write(line)
    # здесь мы записываем данные из файла  my_test3.txt в файл my_test4.txt
    # запишется my_test4.txt - точная копия my_test3.txt


***********

