
- Ссылки:
https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D0%B3%D1%80%D0%B0%D1%84%D0%BE%D0%B2
https://ru.wikipedia.org/wiki/%D0%93%D1%80%D0%B0%D1%84_(%D0%BC%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)

- Очень хорошее видео про графы в видео-курсах для find-route-service:
https://coursehunter.net/course/sayt-na-django-3-1-realizaciya-tz-na-poziciyu-junior-developer	(55 урок)
	ИЛИ
C:\Users\kiril\Desktop\Job\tree-of-knowledge\Django\udemy-djangoth\10 Приложение Маршруты\55

У графа есть:

	- вершины (узлы)

	- рёбра (грани) соединяющие эту вершину:
		
		рёбра бывают - ориентированные (со стрелочкой в одно или оба направления)
			     - неориентированные (без стрелочки, просто связь)
		

Итого граф бывает ориентированный и неориентированный


--- Рёбра (грани)

- весы
Помимо ориентированности и неориентированности рёбра также могут иметь вес
Вес это некая характеристика, типо расстояния, или времени.
Что-то, что можно представить ввиде каких-то значений.
Ну и понятно, что можно искать самые короткие маршруты по этим весам


Кстати, насчёт ориентированности и неориентированности, если так подумать,
то грани всегда ориентированны, только когда просто связь (неориентированные)
то проще запомнить, что между всеми вершинами связь всегда двойная,
т.е. стрелки в обе стороны.


--- Алгоритмы

Существует множество алгоритмов поиска в графах

2 распространённых вида:
	
	- поиск в ширину BFS (breadth-first search)
		
	- поиск в глубину DFS (depth-first search)

sources: 
	- в ширину https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B8%D1%81%D0%BA_%D0%B2_%D1%88%D0%B8%D1%80%D0%B8%D0%BD%D1%83
	- в глубину https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B8%D1%81%D0%BA_%D0%B2_%D0%B3%D0%BB%D1%83%D0%B1%D0%B8%D0%BD%D1%83#:~:text=%D0%9F%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%20%D0%B3%D0%BB%D1%83%D0%B1%D0%B8%D0%BD%D1%83%20(%D0%B0%D0%BD%D0%B3%D0%BB.,%D0%B8%D1%81%D1%85%D0%BE%D0%B4%D1%8F%D1%89%D0%B8%D0%B5%20%D0%B8%D0%B7%20%D1%80%D0%B0%D1%81%D1%81%D0%BC%D0%B0%D1%82%D1%80%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC%D0%BE%D0%B9%20%D0%B2%D0%B5%D1%80%D1%88%D0%B8%D0%BD%D1%8B%20%D1%80%D1%91%D0%B1%D1%80%D0%B0.

BFS применяется для поиска кратчайшего маршрута
DFS используется для поиска всевозможных вариантов 


- тип данных для алгоритма

Для того, чтобы обработать граф в какой-либо функции для реализации алгоритмов
граф необходимо представить ввиде какого-то набора данных, например:

{
	L: [M, B, G],
	M: [B, Ve],
	B: [G, Ve, K, Va],
	G: [B, H, K],
	Ve: [Va, H, K],
	Va: [B, G, H, K],
	K: [G, H],
	H: [],
}

В данном случае ключи - это вершины графа, а значение - это список из вершин, 
к которым этот граф имеет направление (явно для напрвленного графа)


