---------------------------------------------------------------------------------------------
                        Фикстуры
https://software-testing.ru/library/testing/testing-automation/3357-pytest-the-awesome-parts-fixtures
https://qna.habr.com/q/70560
Фикстуры - это по сути тестовые данные. Они нужны для unit-тестирования.
Это могут быть как данные в базе, так и обычные файлы (обычно 2 варианта, до и после обработки так скажем).
Каждый раз когда запускаются тесты, эти данные используются для установления начального состояния системы,
что бы тесты всегда выполнялись предсказуемо.
Для функционального тестирования (тестрирование контроллеров, интаграционных тестов) фикстуры не применяются,
хотя суть там так же сходна. Если честно, то тут мнение расходится. Одни говорят что при функциональных тестах
нельзя использовать даже моки, то есть система в процессе выполнения тестов полностью создает то состояние
которое необходимо для других тестов. Например последовательное выполнение тестов на добавление статьи и
ее просмотр. Другие же предпочитают для каждого тесткейса выставлять состояние с нуля.
По сути это схоже с использованием фикстур, но реализация различается.
У вас есть некое api для заполнения данными (скажем метод добавляющий пользователя),
и перед выполнением тест-кейса происходит ресет данных и заполнение их новыми.
Плюсы так же есть - можно распаралелить выполнение тестов. (но не верьте мне на слово)
Миграции - механизм организации версионности структуры проекта.
Вы можете написать миграцию для изменения местоположения статики
(картинки, поменять ссылки в базе и т.д.), или же у вас добавляется новая таблица/поле.
Обычно дополняется обратной миграцией, которая восстанавливает исходную структуру.
Обязательно для работы в команде или при частом изменении организации данных в проекте,
вообще я бы посоветовал использовать их всегда.
Django поддурживает форматы JSON, XML и даже YAML
Основные две команды, как загружать и выгружать данные из db
python manage.py dumpdata   - выгружает дынные из db
python manage.py loaddata   - загружает дынные в db
Пример использования:
python manage.py dumpdata courses --indent=2
Такая команда выгрузит данные из всех моделей, из приложения courses
в формате JSON (по умолчанию) с пробелом 2(--indent=2)
можно применить флаг --format чтобы задать формат вывода
как сохранить в какой-то файл?
python manage.py dumpdata courses --indent=2 --output=courses/fixtures/subjects.json
Как получить инфу о всех параметрах dumpdata?
python manage.py dumpdata --help
Команда для того, чтобы загрузить данные в db:
python manage.py loaddata subjects.json
Но, но, но...
Есть одна проблемка. Если данные на русском языке, то они выгрузятся с кодировкой UTF-8
и обратно не загрузятся. Такие дела.
Гуглил как решить эту issue, но так и не нашел, такое ощущение, что эта проблема только у меня.
По умолчанию django ищет фикстуры в папке fixtures/ каждого приложения, но можно указать полный
путь до них. Также есть возможность задать каталоги где искать фикстуры
с помощью константы FIXTURE_DIRS в settings.py
Фикстуры - отличный способ заполнить базу данных начальными объектами, также
очень удобно применять их при тестировании.
Про фикстуры и тестирование в doc:
https://docs.djangoproject.com/en/3.2/topics/testing/
https://docs.djangoproject.com/en/3.2/ref/django-admin/#django-admin-loaddata
https://docs.djangoproject.com/en/3.2/howto/initial-data/
Но если данные на английском языке, то все нормально выгружает и загружает:
$ python manage.py dumpdata courses --indent=2 --format=json --output=courses/fixtures/subjects.json
$ python manage.py loaddata subjects.json
Installed 5 object(s) from 1 fixture(s)
