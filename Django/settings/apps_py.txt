sources:
	https://docs.djangoproject.com/en/4.0/ref/applications/

#                       apps.py

# При создании приложения! django создает определяет конфигурационный класс
# при создании приложения создается файл apps.py где описан базовый конфигурационный класс
# он унаследован от AppConfig - эти классы позволяют нам хранить методанные приложения
# и предоставляют нам интроспекцию
# https://docs.djangoproject.com/en/3.2/ref/applications/

# Интроспекция (англ. type introspection) в программировании — возможность запросить тип
# и структуру объекта во время выполнения программы.

# метод ready() - вызывается сразу как только заполнен реестр приложения
# любая логика связанная с инициализацией нашего приложения должна быть объяснена в этом методе

# пример использования ready для подключения сигналов:

	class ImagesConfig(AppConfig):
    		default_auto_field = 'django.db.models.BigAutoField'
    		name = 'images'

    		def ready(self):
        		import images.signals

""" Своими словами: 
базовый класс композиции приложения в apps.py, заимствованный от AppConfig
класс, который содержит метаданные
очень условно - это можно назвать эдаким аналогом ContentType для модели
Если нужно задать определенные значения при инициализации приложения - нужно использовать этот класс"""


				apps
from django.apps import apps
apps.get_model(app_label='courses', model_name=model_name)
apps.get_models(), - возвращает список всех кстановленных моделей
apps.get_model(app_label='courses', model_name='model_name') - возвращает конкретно эту модель
https://docs.djangoproject.com/en/3.2/ref/applications/
