# ----- О МОДЕЛЬНЫХ ФОРМАХ
# Когда мы определяем модельную форму заимствованную от ModelForm
# мы позволяем django самому формировать поля формы, основываясь на модели
# к которой мы эту модельную форму привязали
# Но только не в том случае, когда мы переопределяем какое-то поле
# для этой модельной формы
# тогда мы меняем механизм формирования данного поля
# как доказательство, что мы меня механизм переопределения
# label в html шаблоне будет браться тот, что указан в поле модели если не переопределяем
# и указан тот что будет в переопределенном поле (или название поля если label как арумент не указываем)
# если переопределяем соответственно

# но все равно это поле должно соответствовать типу данных поля соответствующей модели

# class CityModelForm(ModelForm):
#     name = CharField(label='Город', widget=TextInput(attrs={'class': ' form-control',
#                                                             'placeholder': 'введите название города', }))
#     class Meta:
#         model = City
#         fields = ('name',)


--------- Model Form Functions --------
sources:
	https://docs.djangoproject.com/en/4.0/ref/forms/models/

Допустим, мы хотим сделать так, чтобы модельная форма создавалась динамиечски
(не в файле forms.py)
Для этого есть modelform_factory


from django.forms import modelform_factory

Form = modelform_factory(
    model=model, # имя модели для которой создаём модельную форму
    
    exclude=[ 		
        'owner', 'order', 'created', 'updated',
    ]
)
exclude - поля, которые мы исключаем
есть fields - поля, которые мы хотим чтобы создавались
Это хорошо подходит для создания домельной формы, когда есть несколько
различных моделей, и нам нужно в разных ситуациях от разных моделей создавать эти
модельные формы

