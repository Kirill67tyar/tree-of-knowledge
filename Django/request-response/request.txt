sources:
	https://docs.djangoproject.com/en/4.0/ref/request-response/

	отличная статься по объкту запроса 
	https://django.fun/docs/django/ru/4.0/ref/request-response/

from django.http.request import HttpRequest
from django.core.handlers.wsgi import WSGIRequest

Как Django понимает, по какому url к нему обращаются:
Он получает HTTP запрос парсит строку запроса и заголовки, и уже от-туда вытаскивает URL

На самом деле request в django - экземпляр класса WSGIRequest,
во всяком случае во время POST-запроса (GET наверное тоже)

Но WSGIRequest заимствуется от HttpRequest, 
т.е. HttpRequest более базовый класс


методы и атрибуты request:

отличная статься по объкту запроса 
https://django.fun/docs/django/ru/4.0/ref/request-response/

COOKIES - Словарь, содержащий все файлы cookie. Ключи и значения представляют собой строки.
FILES - для медиа файлов (если мы использовали поле ImageField и послали post запрос)
GET
META - сложно сказать что это. толи метаданные сервера толи клиента
POST
__class__
__delattr__
__dict__
__dir__
__doc__
__eq__
__format__
__ge__
__getattribute__
__gt__
__hash__
__init__
__init_subclass__
__iter__
__le__
__lt__
__module__
__ne__
__new__
__reduce__
__reduce_ex__
__repr__
__setattr__
__sizeof__
__str__
__subclasshook__
__weakref__
_current_scheme_host
_encoding
_get_full_path
_get_raw_host
_get_scheme
_initialize_handlers
_load_post_and_files
_mark_post_parse_error
_set_content_type_params
_upload_handlers
accepted_types
accepts
body
build_absolute_uri - единственный способ выстроить абсолютный url - request.build_absolute_uri(obj.get_absolute_url()) 
close
content_params
content_type
encoding
get_full_path
get_full_path_info
get_host
get_port - 127.0.0.1:8000
get_raw_uri
get_signed_cookie
headers
is_ajax() - сделан ли запрос с помощью XMLHttpRequest (асинхронный). Значение будет задаваться в HTTP заголовке (убран)
is_secure
method
parse_file_upload
path
path_info
read
readline
readlines
resolver_match
scheme
session - сессии в django
upload_handlers
user