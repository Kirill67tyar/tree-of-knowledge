---------------------------------------------------------------------------------------------

sources:
	https://github.com/Kirill67tyar/education-service/blob/master/src/courses/draft.py#L80
	
	doc
	https://docs.djangoproject.com/en/4.0/topics/db/models/#model-inheritance

                        Виды наследования моделей Django
3 вида наследования моделей:
1) абстрактные модели
2) наследование с помощью нескольких таблиц
3) прокси модели
------- Абстрактная модель
from django.contrib.auth.models import AbstractUser
Абстрактная модель - это базовый класс. В нем необходимо определить поля, которые будут общими для
всех дочерних классов.
Абстрактные модели полезны, когда нужно описать некую общую базовую информацию.
(вспомни AbstractUser, AbstractBaseUser). Для абстрактоной модели не создается таблица в бд
а вот в модели, от которой она наследуется создается.
Как сделать абстрактную модель? присвоить атрибут abstract = True в классе Meta модели.
Пример абстрактной модели BaseContent и дочерней Text
class BaseContent(Model):
    title = CharField(max_length=250)
    created = DatetimeField(auto_now_add=True)
    class Meta:
        abstract = True
class Text(BaseContent):
    body = TextField()
В этом случае в бд будет создана только одна таблица - Text (<app_name>_text).
------- Наследование с несколькими таблицами
В случае наследования с несколькими таблицами, для каждой модели создается соответствующая таблица.
Для каждой из моделей создается своя собственная таблица
Django делает ссылку OneToOneField на родительскую модель из дочерней.
Чтобы применить этот метод нужно просто унаследовать дочерней модели от родительской.
class BaseContent(Model):
    title = CharField(max_length=250)
    created = DatetimeField(auto_now_add=True)
class Text(BaseContent):
    body = TextField()
Не совсем понятно для чего она, какие у нее преимущества и недостатки.
------- Прокси-модели
Они используются когда модели хранят одинаковые данные но поведение классов отличается.
Полезно, когда мы хотим реализовать для каждой из моделей отдельную функциональность
(методы, переопределить или добавить менеджеры, использовать другие опции класса Meta)
Разумеется таблицы для proxy-моделей в бд не создаются.
Важно - все эти модели будут работать с одной таблицей в db
как определить proxy модель? добавить атрибут proxy=True в класс Meta модели.
Пример proxy модели:
class BaseContent(Model):
    title = CharField(max_length=250)
    created = DatetimeField(auto_now_add=True)
class OrderingContent(BaseContent):
    class Meta:
        proxy = True
        ordering = [-'created',]
    def created_delta(self):
        return timezone.now() - self.created
В донном случае OrderingContent добавит сортировку по умолчанию для QuerySet и метод created_delta
Очень полезная статья, но немного не по теме
https://docs.djangoproject.com/en/3.2/ref/models/fields/