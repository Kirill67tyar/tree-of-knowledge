"""
--------------------- STEP 1 (2) -----------------------------------------------------------------------------

...|Internet, www, введение в сетевые протоколы|...

Сетевые протоколы - это алгоритмы которые работают на различных устройствах в операционых системах,
и обеспечивают сервис передачи данных
Эти протоколы образуют стек, т.е. одни протоколы работают поверх других протоколов


Итак:
IP - отвечает за перессылку пакетов вообще
TCP - устанавливает между хостами канал, нумерует пакеты. Т.е. делает так,
чтобы пакеты точно доходили до места сообщения

Сетевые протоколы образуют стек

IP - глобальная адресация, передача в гетерогенной среде
TCP - надежная последовательная передача данных
DNS - система имен
HTTP, SSH, P2P - прикладные протоколы

Протокол IP
Протокол IP позволяет передавать данные между двумя произвольными устройствами в сети
IP проткол вводит глобальную адресацию
У каждой машины подключенной к сети есть уникальный IP адрес. Этот IP адрес состоит из 4 байт
IP позволяет уникально идентифицировать машину в сети и доставлять к ней ин-фу

https://habr.com/ru/company/oleg-bunin/blog/461829/
IP протокол:
1) Каждая машина подключенная к сети имеет уникальный IP адрес (с некоторыми оговорками). Позволяет идентифицировать
машину сети.
2) Работает с дейтаграммами, обеспечивает передачу данных дейтаграммами (небольшими кусочками данных)
3) Не гарантирует надежную доставку

TCP протокол:
1) Работает поверх проткола IP
2) Обеспечивает надежную доставку данных поверх проткола IP (гарантированно доставляет данные с одной машины на другую)
3) Обеспечивает интерфейс похожий на работу с файлами
4) Данные передаются через поток, и могут передаваться вообще произвольные байты


Прикладные протоколы реализуют логику, связанную уже с конкретной доменной облостью
HTTP, SSH, P2P, FTP, SMTP прикладны протоколы:
1) работают поверх TCP протокола

FTP - для передачи больших файлов
P2P позволяют передавать файлы быстро
SSH (secure shell) - позволяет с безопасно, с помощью шифорования получить доступ к машина
Возможно SSH используется для HTTPS

WWW - сеть, которая по сути работает поверх интернета
World Wide Web - множество взаимосвязанных документов распологающихся на машинах (серверах) подклюенных к интернет
также
WWW - набор протоколов, серверного и клиентского ПО, позволяющего получать доступ к документам
Основной протокол для WWW это HTTP
Вспомни - любое приложение - это по сути набор документов
По сути www - это сеть, или система, которая работает поверх интернета
Всемирная сеть состоит из документов
Так что любое проект, люой сайт - это алгоритм, состоящий из документов, который говорит сереверу как ему работать.
С другой стороны www это стек протоколов по которому эти документы передаются с сервера на клиент
WWW - это множество документов, которые хранятся в сети, и ссылаются друг на друга (гипертекстовые документы)

world wide web - один из частных слуаев сети применения интернета
Гиперссылка - важнейшая вещь в web. Способ указания связи между документами.
По гиперссылкам пользователь может переходить на другие сайты (или части этого сайта)

Также важнейшей частью в документе является ссылка на ресурсы (CSS, JS)

Примеры пожклюения на ресурсы:
<link rel="stylesheet" href="{% static 'css/bookmarklet.css' %}">
<script src="https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"></script>
<script src="{% static 'lib/easing/easing.min.js' %}"></script>
<img src="{{ product.image.url }}">

Примером же ссылки на другие документы (гиперссылки) является теги <a href=..> и <form>
(form не совсем всё-же)

Т.е. когда мы подключаем ресурсы web страница, когда открывается в браузере, делает http запросы к
адресам подключенным к нашей html странице, дополнительных ресурсов (стили, скрипты, медиа)

Когда клиент загружает html документ - он автоматически получает все ссылки на ресурсы и гиперссылки.


Сайт. Логически сайт представляет из себя нечто единое целое, состоящее из документов
и имеющее доменное имя. Физически же сайт может находиться на одной или нескольких машинах

!!! ИТОГ:********************************************************************************************
World Wide Web - сеть - это множество гипертекстовых документов, а также связанных с ними ресурсами
которые размещены на разлиных серверах (машинах подключенных к internet), которые группируются в сайты,
и которые друг на друга ссылаются посредством гиперссылок
*****************************************************************************************************


--------------------- STEP 2 (3) -----------------------------------------------------------------------------
source:
https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_MIME-%D1%82%D0%B8%D0%BF%D0%BE%D0%B2
http://htmlbook.ru/html/value/MIME

Типы документов (MIME типы)

- text/html
- text/css
- text/javascript
- text/xml
- application/JSON
- image/png
- video/mp4



Для того чтобы указать тип документа в web используются MIME типы
MIME - Multipurpose Internet Mail Extensions (многоцелевые расширения интернет-почты)

mime тип указывает получателю (клиенту) каким образом можно интерпретировать протокол (документ?)
указывается в headers. MIME тип нужен в первую очередь чтобы браузер (клиент) знал как обрабатывать этот файл

Расширение файлов играют второстепенную роль. Расширение может быть произвольным, то каким образом
обрабаывается файл определяется его MIME типом. А mime тип документа будет указан в заголовках http
А вот сам mime тип зависит от расширения файла(но не всегда). Если расширение у файла нет, то сервер, который отдает
mime файл может определеить тип данных автоматически (посмотрев начало этого файла)

Либо mime тип может устанавливаться программистом в ручном режиме
По идеи должен указываться в заголовке content-type

html - hyper text marked language. Сейчас html это не просто язык разметки текста
а по сути язык разметки (проектирования) пользовательского интерфейса

Принцип HTML:
1) у нас есть теги
2) у тегов могут быть аттрибуты со значениями
3) между тегами может содержаться какой-то текст
4) ну и базовая структура HTML

Что есть текстовый формат? Это когда мы можем открывать файлы в обычном текстовом редакторе (блокнот)

Разметка XML намного более строгая чем html

Зачем нужен XML? Если HTML предназначен, для передаи отображения документов для пользователям
То XML для передачи и отображения между двумя программами (как и JSON).
Чтобы одна программа могла сериализовать данные, а другая могла их десериализовать
Ну и программистами, которые эти программы пишут
Поэтому этот формат более строгий, чтобы проще было реализовать парсер, на каком-либо языке

JSON также предназначен для передачи данных между двумя программами
несмотря на то, что MIME тип json'a это application/json - JSON это текстовый формат
В JSON два вида конструкция - массивы и объекты
Типы данных:
-- массивы - [array]
-- объекты - {"k": v}
-- string - "only double quotes"
-- integer - 1   3.2  555
-- bool - true, false, null

JSON - структура из вложенных объектов и массивов где ключем в объектах могут выступать только
типы данных string

Формат JSON быстрее сериализуется нежели XML

JSON поддерживается всеми браузерами из коробки, т.к. это основной формат данных для языка JS
По этому формату осуществляется автоматический парсинг при получении JSON файла из сети

На данный момент формат JSON используется для обмена чистыми данными между сервером и клиентом.
И для обмена данными между приложениями это также очень удобный формат


Документы - не тоже самое что и файлы

Документы могут быть статическими и динамическими:

Статические:
-- файлы на дисках сервера
-- Как правило обладают постоянным адресом

Динамиеские:
-- создаются на каждый запрос
-- содержимое зависит от времени и пользователя
-- адрес может быть постояннвм или меняться


!!! Не путать с динамиеским и статическим сайтом !!!


--------------------- STEP 3 (4) -----------------------------------------------------------------------------
sources:
https://habr.com/ru/post/232385/
https://developer.mozilla.org/ru/docs/Learn/Common_questions/What_is_a_URL

URL
Для того тобы пользователю получить документ он должен сообщить браузеру откуда его получать?

Первая важнейшая концепция WWW - это документы
Вторая важнейшая концепция WWW - это адреса этих документов, URLs
У каждого докумнта (во всяком случае статики) должен быть свой url

URL - Uniform(/unified(единый)) resource locator

Состав url
https://stepik.org:8080/lesson/12527/step/4?unit=2975#part1

где:

http - протокол

stepik.org - DNS имя сервера (домен)(ip адрес сайта получается по этому домену, стоит там же где и ip 127....)
Иначе stepik.org - DNS имя IP адреса. По другому это называется домен
    Домен www.example.com также состоит из
    www - третий (или четвёртый, хз) уровень
    example - второй уровень
    com - верхний уровень

8080 - TCP порт

/lesson/12527/step/4 - путь к файлу

?unit=297&key=value - опции запроса (get параметры) (Доступны в django как request.GET) (Query string)

#part1 - якорь, положение на страницы


URL - это подмножество адресов идентификаторов в URI

URL указывает по какому протоколу, с какого сервера, и какой документ нужно загрузить.

URL - указывает на местоположение документа. И проходит через котроллер
т.е. мы выстраиваем документ через котроллер, а путь к документу через маршрутизатор.

Подробный разбор URL:

1) первое, с чего начинаетсяс url - это схема. Схема показывает с помощью какого протокола (HTTP, HTTPS)
этот URL загружать

2) :// - разделитель

3) по DNS имени DNS сервер (телефонная книга интернета) определяет ip адрес запрашиваемого сервера

4) далее порт. Порт указывает по какому TCP порту подключаться к этой машине.
На одной машине может быть открыто множество различных портов, которые обслуживают конкретные машины
Протокол HTTP по умоланию использует порт 80
HTTPS - по умолчанию использует 443 порт

5) далее идет после ? query-string (или get параметры) - применяется практические только для
динамических документов (документов, которые мы наполняем данными из бд (и не только) через контроллер)

6) #part1 - якорь указывает позицию в документе, с которого нужно начать просмотр
не адресует к каком либо новому документу. Просто позиция в этом документе
при добавлении не требует http request


Абсолютные и относительные URLs

Абсолютный - это полный путь до нужного документа (модуля). Абсолютный url позволит тебе
попасть на нужную страницу - где бы ты ее не ввел
Гиперссылки на другой сайт должны быть абсолютными

Абсолютный URL - точно нам указывает 1 - по какому протоколу, 2 - с какого сервера, 3 - какой документ
( и какой TCP порт, но он почему-то не виден) нам нужно загрузить

Относительный URL - это путь документа, относительно его текущего сервера (домена)
Браузер, который анализирует относительный путь - понимает, что это относительный путь
и в начало подставляет протокол и домен текущего сайта.
относительные urls используются для того, чтобы подгружать документы со своего сайта

Относительные урлы сделаны не просто так. Мы можем отображать свой сайт на разных доменах
или переезжать с домена на домен. И благодаря относительным урлам сайт будет подгружать
ресурсы и ссылаться на свои части корректно Т.е. это очень удобно.
чаще всего при разработке сайта используются именно такие urls

https://stepik.org/lesson/12527/step/4 - абсолютный URL

//stepik.org/lesson/12527/step/4 - абсолютный URL (schemeless, т.е. как и для HTTP так и для HTTPS)

/lesson/12527/step/4?unit=2975 - относительный (в пределах домена)

?unit=2975 - относительный (от url текущего документа)

#part1 - относительный (в пределах текущего документа)

Я так понимаю для приложения - нормально в ссылках тега a прописывать относительный url
в пределах текущего приложения (в пределах домена)

Тоже самое касается и для подгружаемых ресурсов CSS и javascript

ведь тег {% url 'app_name:name' %} - дает адрес относительного url

тег {% static 'pathname/style.css' %} - тоже дает нам адрес относительного url


Если оснвной документ был загружен https то и все ресурсы должны загружаться https
Если через http, то и все ресурсы через http
Чтобы документ загружался как http так и https существует schemeless url
Т.е. браузер автоматически подставляет протокол, по которому загружается документ

Правила разрешения URL:

см. картинку:
C:\Users\User\Desktop\Job\learning_tree\tree-of-knowledge\web-tehnologies(stepik)\media\rules_construction_urls.png

Основные правила:
1) если два слеша // то браузер склеивает со схемой (http, https),
2) если один слеш, то браузер склеивает с доменом
3) если не со слеша, а с чего-то другого (без слеша, ?, #),
в таком случае браузер сохраняет путь к текущему документу, и приклеивает часть url к списку
всех директорий, в которых лежит документ.

Вот почему функция path() - называется именем шаблона

!!! ИТОГ:********************************************************************************************
Абсолютный URL - точно нам указывает 1 - по какому протоколу, 2 - с какого сервера, 3 - какой документ
( и какой TCP порт, но он почему-то не виден) нам нужно загрузить


Вам стоит представлять URL как обычный почтовый адрес:
протокол обозначает почтовый транспорт, который вы собираетесь использовать,
доменное имя - это город, порт - это почтовый индекс; адрес - это номер дома;
параметры представляют собой дополнительную информацию, как, например, номер квартиры;
и, наконец, якорь представляет собой конкретного получателя, которому вы адресуете своё письмо.

*****************************************************************************************************


--------------------- STEP 4 (5) -----------------------------------------------------------------------------
Как документы могут ссылаться друг на друга

1 способ -- с помощью гиперссылок
Собственно тег a (<a href="") это и есть тег для гиперссылки

2 способ -- отправить форму
тут тег form
<form action='/asd/qwe' method="POST">
    <input type="text" name="some_field_name" value="your input value">
    <input type="submit" value="Тыц">
    or
    <textarea ...>
    or
    <select ...>
</form>
При нажатии на кнопку submit - браузер перейдет на новый url (указанный в action)
используя http запрос с методом, что указан в method
И передаст на этот сайт по этому url параметры, которые были введены в форме

Внутри формы - элементы ввода, куда пользователь может добавить данные, ввести информацию и т.д.

Форма тоже способ перейти с одного документа на другой, предварительно передав данные
(в get параметрах или body http)

(как я узнал, но формы могут быть и через div)


Ну и ссылки на ресурсы,т.е. связанные файлы css js media

<script src='...'></script> - требует закрывающий тег
<link href='' rel='stylesheet' ...
<img src='...'>

Для css - тег link (! с аттрибутом rel='stylesheet', это важно)

На загрузках ресурсов можно использовать как и абсолютный url (с других сайтов)
так и относительный (со своего приложения)

Правила перехода относительных урлов такие же, как это было показано выше (Правила разрешения URL)

Теги link и script - невидимы для пользователя

Пример добавления картинки для заднего фона

Ссылки на другой документ могут быть и в css файле:
.slide {
    backgroung-image: url(../pictures/network.png);
}

@font-face {
    font-family: terminus;
    src: url(fonts/terminus.ttf)
}


Помимо css ссылка на другой документ может находиться в javascript
(часто применяется для ajax)



--------------------- STEP 5 (6) -----------------------------------------------------------------------------

На концептуальном уровне web - это множество документов, ссылающихся друга на друга способ гиперссылок
гиперссылки бывают на другие страницы и ресурсы
И те и другие могут быть как внутри приложения так и за его пределами
Другие страницы:
теги a, form
Ресурсы:
теги script, link, img
Гиперссылки же ссылаются на путь с помощью urls (абсолютный или относительный)

Но что web представляет из себя на уровне программного обеспечения (какова его программная архитектура?)

Web приложение - это в первую очередь клиент-серверное приложение

Web клиенты - это компьютеры конечных пользователей. Задача - получить и отобразить документы

web сервера - (как правило) работают на серверах в датацентрах. Их задача заключается в:
1) хранении документов
2) генерации документов, посредством работы контроллера, который достаёт инфу из бд
3) функционале CRUD в бд, через сайт
4) отдачи документов

Документы же на серверах в большинстве случаев наполняются (рендерятся) инфой из базы данных
могут из кэша или redis
Так что сервера работают с инфой из бд, посредством функционала CRUD

Браузеру сервер посылает html документ, и связанные с ним ресурсы.
В случае с мобильным приложением это JSON или XML
Браузер открывает TCP соединение.

Преимущества клиент-серверного подхода (клиент-серверной архитектуры):

-- открытый протокол (HTTP хорошо документирован)
-- стандартный клиент (браузер, хотя нюансов для работы с браузером много)
-- прозрачный способ взаимодействия приложений (и универсальность)
-- распределенная и масштабируемая система (приложение может храниться на нескольких серверах)
-- сильный волос, нефритовый стержень

открытый протокол
http - открыт и очень хорошо документирован

стандартный клиент - использование в качестве клиента браузеры
означает что нам не нужно разрабатывать сложное клиентское приложение

прозрачный способ взаимодействия приложений
легкий и прозраный способ взаимодействий приложений между собой


"""