"""
--------------------- STEP 1 (2) -----------------------------------------------------------------------------
Веб клиенты

Виды веб клиентов:

-- библиотеки в яп:
                    urllib, requests, libcurl и т.д.

-- консольные утилиты:
                    wget, telnet, curl и т.д.

-- роботы:
            поисковики, вредоносные скрипты (правда они написаны на библиотеках яп)

-- браузеры:
            полноценные: chrome, firefox и т.д.
            встроенные: web-view, web-kit и т.д.
            десктопный и мобильные



Веб клиент (user агенты) - это та часть клиент-серверной архитектуры, которая загружает документы по сети
и что-то с ними выполняет

В большинстве случаев веб клиентами являются браузеры

Практически в каждом яп есть библиотека, позволяющая работать с http
Эти библиотеки выполняют роль веб клиента, позволяют:
- работать с документами (requests.text, requests.content)
- работать с http непосредственно (с query-string, get параметрами, заголовками, телом http)

Консольные web-клиенты - это такие утилиты, которые позволяют работать с http из консольной строки (Linux)

роботы веб-клиенты - самый простой пример робота это поисковик
робот поисковик, который ходит по web, собирает web страницы и индексирует их


--------------------- STEP 2 (3) -----------------------------------------------------------------------------
библиотеки ЯП как web-клиенты

- Стараются предоставить максимум опций для работы с HTTP
- Осуществляют кодирование/декодирование данных
- Перенаправление, куки - опционально

Назначение - используются внутри других программ для простой работы с http


Консольные клиенты (curl)
Что круто - умеют анализировать html и скачивать все необходимые ресурсы

Как работают библиотеки и консольные клиенты для работы с http

1) открывают TCP соединение на указанный адрес url, (указанный хост и с помощью DNS соединение узнается ip)
2) связывает это TCP соединение с компьютером (консолью, интерпретатором) В случае с python создает
объект ответа (и запроса) python, и позволяет общаться с web-сервером напрямую, через клавиатуру

HTTP протокол является текстовым - запомни это. По сути это текст в одном из пакетов TCP соединения

Помни что у HTTP и HTTPS разные порты (TCP), 80 и 443
И вот библиотека requests может сама определить какой порт использовать
(хотя он указан в самом url как схема)


--------------------- STEP 3 (4) -----------------------------------------------------------------------------

Веб-клиент - браузер

Основное предназнаение браузеров - отображение html страницы
Однако возможности современных браузеров огромны (3d игры, со внутри браузеров)
Сегодня браузер - среда для полноценного графического интерфеса, и среда для разработки JS

Сценарий работы web приложения:
-- пользователь вводит url (посыслает http запрос)
-- приходит http ответ, браузер загружает html документ (web страницу)
-- браузер анализирует (parse) HTML и загружает связанные ресурсы
-- браузер отображает (rendering) HTML страницу (это и есть web страница)
-- пользователь переходит по гиперссылке или отправляет форму
-- цикл повторяется

Оказыввется сервер разделяется не только на сервер и базу данных, но и на
web-server и application-server.
Вкратеце:
web-server загружает статику (js, css, img)
application-server делает динамику, html страница загружается именно от туда.

Очень хорошая схема работы:
C:\Users\User\Desktop\Job\learning_tree\tree-of-knowledge\web\scheme_web_server_and_application_server


--------------------- STEP 4 (5) -----------------------------------------------------------------------------
Сценарий работы современного приложения:

1) клиент делает http запрос
2) application-server делает http ответ
3) браузер загружает html страницу
4) javascript загружает данные с помощью AJAX запросов
5) javascript обесспеивает полноценный user interface на странице
6) пользователь взаимодействует с ui что приводит к вызову javascript обработчиков
7) javascript обновляет данные на сервере или загружает новые данные используя AJAX

смотри на схему:
C:\Users\User\Desktop\Job\learning_tree\tree-of-knowledge\web\scheme_web_server_and_application_server_with_ajax

Интерфейс пользователя (user interface) формируют статические файлы (css, js, img)

AJAX - посылает тот же самый HTTP по которому загружаются все ресурсы в web
отличие в том, что этот запрос инициализируется с помощью javascript
в хэдер http request добавляется специальный заголовок для ajax

Очень важно, обязательно смотри на картинку выше

application сервер получив ajax запрос (тоже http) формирует http ответ
Но в современных приложениях  application server посылает не просто html документ
(он часто посылается от web сервера) а сырые данные в формате json (или xml)
Определенные данные достаются из db (сортируются), производится CRUD функционал
эти данные сериализуются в json формат и делается http-response
Т.е. application server возвращает в браузер сырые данные
В браузере работает js, он принимает эти данные, парсит их, и отображает как нужно


Особенности современных web приложений:

-- ui находится на одной или нескольких страницах (one/single-page)
-- ui полностью статичен: HTML, CSS, JS - статические файлы
-- логика ui полностью работает на стороне клиента
-- используется шаблонизация в javascript
-- application-server возвращает чистые данные (JSON или XML а не HTML)



Шаблонизация.
В классическом web приложении шаблонизация происходит на сервере (рендерим наши шаблоны)
В современном приложении (one-page) шаблонизация происходит в javascript (в клиенте)
Во всяком случае так часто бывает.


У нас есть два варианта:
1 - классическое web приложение - приложение как ты делаешь на django с mtv паттерном
когда шаблоны рендерятся данными напрямую из обработиков
2 - современное web приложение - когда мы на application-server'е посылаем
ответ с json или xml данными. а javascript принимает эти данные и парсит уже.

Разумеется существуют и промежуточные варианты

Приложение строится по классическому принципу, где мы переходим по разным web страницам
но каждая web страница предоставляет множество интерактивных элементов
с которыми можно взаимодействовать без перезагрузки страниц





Классиеский сценарий работы, когда каждое взаимодействие с пользователем переходит
на другую web страницу (перегружает сервер)

Современный подход - когда пользовательский интерфейс загружается на одной странице
после чего, с помощью технологий javascript и ajax пользовательский интерфейс загружает с
сервера чистые данные (json/xml)

Классические варианты, которые широко распространены

Смотри видео 1.3 step 5
"""
